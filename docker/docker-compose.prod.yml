version: "3.9"

x-airflow-common: &airflow-common
    build:
        context: ../airflow
        dockerfile: airflow.dockerfile
    depends_on: &airflow-common-depends-on
        redis:
            condition: service_healthy
        airflow_db:
            condition: service_healthy
        kafka:
            condition: service_started
    environment: &airflow-common-env
        AIRFLOW__CORE__EXECUTOR: CeleryExecutor
        AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@airflow_db/airflow
        AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@airflow_db/airflow
        AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@airflow_db/airflow
        AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
        AIRFLOW__CORE__FERNET_KEY: ""
        AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: "true"
        AIRFLOW__CORE__LOAD_EXAMPLES: "false"
        AIRFLOW__API__AUTH_BACKENDS: "airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session"
        AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: "true"
        GH_TOKEN: ${AIRFLOW_GH_TOKEN}
    user: "${AIRFLOW_UID:-50000}:0"
    volumes:
        - ${AIRFLOW_DIR:-.}/dags:/opt/airflow/dags
        - ${AIRFLOW_DIR:-.}/logs:/opt/airflow/logs
        - ${AIRFLOW_DIR:-.}/config:/opt/airflow/config
        - ${AIRFLOW_DIR:-.}/plugins:/opt/airflow/plugins

services:
    airflow-webserver:
        <<: *airflow-common
        command: webserver
        depends_on:
            <<: *airflow-common-depends-on
            airflow-init:
                condition: service_completed_successfully
        healthcheck:
            interval: 30s
            retries: 5
            start_period: 30s
            test: ["CMD", "curl", "--fail", "${AIRFLOW_WEBSERVER_TEST_CMD_URL}"]
            timeout: 10s
        ports:
            - "${AIRFLOW_WEBSERVER_PORT}:8080"
        restart: always

    airflow-scheduler:
        <<: *airflow-common
        command: scheduler
        depends_on:
            <<: *airflow-common-depends-on
            airflow-init:
                condition: service_completed_successfully
        healthcheck:
            interval: 30s
            retries: 5
            start_period: 30s
            test: ["CMD", "curl", "--fail", "${AIRFLOW_SCHEDULER_TEST_CMD_URL}"]
            timeout: 10s
        restart: always

    airflow-worker:
        <<: *airflow-common
        command: celery worker
        depends_on:
            <<: *airflow-common-depends-on
            airflow-init:
                condition: service_completed_successfully
        environment:
            <<: *airflow-common-env
            # Required to handle warm shutdown of the celery workers properly
            # See https://airflow.apache.org/docs/docker-stack/entrypoint.html#signal-propagation
            DUMB_INIT_SETSID: "0"
        healthcheck:
            interval: 30s
            retries: 5
            start_period: 30s
            test: ["CMD-SHELL", 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"']
            timeout: 10s
        restart: always

    airflow-triggerer:
        <<: *airflow-common
        command: triggerer
        depends_on:
            <<: *airflow-common-depends-on
            airflow-init:
                condition: service_completed_successfully
        healthcheck:
            interval: 30s
            retries: 5
            start_period: 30s
            timeout: 10s
            test:
                [
                    "CMD-SHELL",
                    'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"',
                ]
        restart: always

    airflow-init:
        <<: *airflow-common
        entrypoint: /bin/bash
        # yamllint disable rule:line-length
        command:
            - -c
            - |
                function ver() {
                  printf "%04d%04d%04d%04d" $${1//./ }
                }
                airflow_version=$$(AIRFLOW__LOGGING__LOGGING_LEVEL=INFO && gosu airflow airflow version)
                airflow_version_comparable=$$(ver $${airflow_version})
                min_airflow_version=2.2.0
                min_airflow_version_comparable=$$(ver $${min_airflow_version})
                if (( airflow_version_comparable < min_airflow_version_comparable )); then
                  echo
                  echo -e "\033[1;31mERROR!!!: Too old Airflow version $${airflow_version}!\e[0m"
                  echo "The minimum Airflow version supported: $${min_airflow_version}. Only use this or higher!"
                  echo
                  exit 1
                fi
                if [[ -z "${AIRFLOW_UID}" ]]; then
                  echo
                  echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
                  echo "If you are on Linux, you SHOULD follow the instructions below to set "
                  echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
                  echo "For other operating systems you can get rid of the warning with manually created .env file:"
                  echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
                  echo
                fi
                one_meg=1048576
                mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
                cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
                disk_available=$$(df / | tail -1 | awk '{print $$4}')
                warning_resources="false"
                if (( mem_available < 4000 )) ; then
                  echo
                  echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
                  echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
                  echo
                  warning_resources="true"
                fi
                if (( cpus_available < 2 )); then
                  echo
                  echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
                  echo "At least 2 CPUs recommended. You have $${cpus_available}"
                  echo
                  warning_resources="true"
                fi
                if (( disk_available < one_meg * 10 )); then
                  echo
                  echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
                  echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
                  echo
                  warning_resources="true"
                fi
                if [[ $${warning_resources} == "true" ]]; then
                  echo
                  echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
                  echo "Please follow the instructions to increase amount of resources available:"
                  echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
                  echo
                fi
                mkdir -p /sources/logs /sources/dags /sources/plugins
                chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
                exec /entrypoint airflow version
        # yamllint enable rule:line-length
        environment:
            <<: *airflow-common-env
            _AIRFLOW_DB_MIGRATE: "true"
            _AIRFLOW_WWW_USER_CREATE: "true"
            _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
            _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
            _PIP_ADDITIONAL_REQUIREMENTS: ""
        user: "0:0"
        volumes:
            - ${AIRFLOW_PROJ_DIR:-.}:/sources

    airflow-cli:
        <<: *airflow-common
        # Workaround for entrypoint issue. See: https://github.com/apache/airflow/issues/16252
        command:
            - bash
            - -c
            - airflow
        environment:
            <<: *airflow-common-env
            CONNECTION_CHECK_MAX_COUNT: "0"
        profiles:
            - ${AIRFLOW_CLI_PROFILE}

    airflow_db:
        image: postgres:13
        environment:
            POSTGRES_USER: $AIRFLOW_DB_USER
            POSTGRES_PASSWORD: $AIRFLOW_DB_PASSWD
            POSTGRES_DB: $AIRFLOW_DB_NAME
        healthcheck:
            test: ["CMD", "pg_isready", "-U", "${AIRFLOW_DB_USER}"]
            interval: 10s
            retries: 5
            start_period: 5s
        restart: always
        volumes:
            - airflow_db-volume:/var/lib/postgresql/data

    client_db:
        image: postgres:13
        environment:
            POSTGRES_USER: $CLIENT_DB_USER
            POSTGRES_PASSWORD: $CLIENT_DB_PASSWD
            POSTGRES_DB: $CLIENT_DB_NAME
        healthcheck:
            test: [ "CMD", "pg_isready", "-U", "${CLIENT_DB_USER}" ]
            interval: 10s
            retries: 5
            start_period: 5s
        restart: always
        volumes:
            - client-db-volume:/var/lib/postgresql/data

    client_initdb:
        build:
            context: ../db
            dockerfile: initdb.dockerfile
        command: [ "python", "initdb.py" ]
        environment:
            POSTGRES_DB: INIT_CLIENT_DB_USER
            POSTGRES_PASSWORD: INIT_CLIENT_DB_PASSWD
            POSTGRES_USER: INIT_CLIENT_DB_NAME
        depends_on:
            client_db:
                condition: service_healthy
        volumes:
            - ../db:/home/initdb

    redis:
        image: redis:latest
        expose:
            - 6379
        healthcheck:
            test: ["CMD", "redis-cli", "ping"]
            interval: 10s
            timeout: 30s
            retries: 50
            start_period: 30s
        restart: always

    zookeeper:
        image: confluentinc/cp-zookeeper:latest
        environment:
            ZOOKEEPER_CLIENT_PORT: $ZOOKEEPER_CLIENT_PORT
            ZOOKEEPER_TICK_TIME: $ZOOKEEPER_TICK_TIME

    kafka:
        image: confluentinc/cp-kafka:latest
        depends_on:
            - zookeeper
        ports:
            - "${KAFKA_PORT}:9092" # Only expose one port that will be used both internally and externally if needed
        environment:
            KAFKA_BROKER_ID: $KAFKA_BROKER_ID
            KAFKA_ZOOKEEPER_CONNECT: $KAFKA_ZOOKEEPER_CONNECT
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: $KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
            KAFKA_ADVERTISED_LISTENERS: $KAFKA_ADVERTISED_LISTENERS
            KAFKA_LISTENERS: $KAFKA_LISTENERS
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: $KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
        healthcheck:
          test: kafka-topics --bootstrap-server kafka:${KAFKA_PORT} --list
          interval: 10s
          timeout: 10s
          retries: 3

    cryptopanic-scraper:
        build:
            context: ../scrapers
            dockerfile: cryptopanic/scraper.dockerfile

    binance-scraper:
        build:
            context: ../scrapers
            dockerfile: binance/scraper.dockerfile

    scraped_consumer:
        build:
            context: ../consumers
            dockerfile: scraped/scraped.dockerfile
        command: [ "python", "main.py" ]
        depends_on:
            kafka:
                condition: service_healthy
            client_db:
                condition: service_healthy
        environment:
            POSTGRES_DB: "${CLIENT_DB_NAME}"
            POSTGRES_PASSWORD: "${CLIENT_DB_PASSWD}"
            POSTGRES_USER: "${CLIENT_DB_USER}"
        tty: true
        volumes:
            - ../consumers/scraped:/home/consumer

    spark:
        build:
            context: ../spark
            dockerfile: spark.dockerfile
        ports:
            - "${SPARK_UI_PORT}:8080"
            - "${SPARK_WORKER_PORT}:7077"

    grafana:
        image: grafana/grafana-oss:latest
        ports:
            - "${GRAFANA_PORT}:3000"
        environment:
            GF_SECURITY_ADMIN_USER: $GRAFANA_SECURITY_ADMIN_USER
            GF_SECURITY_ADMIN_PASSWORD: $GRAFANA_SECURITY_ADMIN_PASSWORD
        volumes:
            - ../grafana/data:/var/lib/grafana
            - ../grafana/conf:/etc/grafana

    wss:
        build:
            context: ../crypto-wss
            dockerfile: wss.dockerfile
        volumes:
            - ../crypto-wss:/srv/app
        tty: true
        depends_on:
          client_db:
            condition: service_healthy
        environment:
            BLOCKCHAIN_API_KEY: ${BLOCKCHAIN_API_KEY}
            POSTGRES_USER: ${CLIENT_DB_USER}
            POSTGRES_PASSWORD: ${CLIENT_DB_PASSWD}
            POSTGRES_DB: ${CLIENT_DB_NAME}

    docker-proxy:
        image: bobrik/socat
        command: "TCP4-LISTEN:2375,fork,reuseaddr UNIX-CONNECT:/var/run/docker.sock"
        ports:
        - "${PROXY_PORT}:2375"
        volumes:
        - /var/run/docker.sock:/var/run/docker.sock

volumes:
    airflow_db-volume:
    client-db-volume:
